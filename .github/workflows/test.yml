name: test

on: 
  push:
    branches:
      - main
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  test_client:
    name: client ${{ matrix.platform }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.9, "3.10", "3.11"]
    env:
      DISPLAY: ':99.0'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # these libraries enable testing on Qt on linux
      - uses: tlambert03/setup-qt-libs@v1

      # strategy borrowed from vispy for installing opengl libs on windows
      - name: Install Windows OpenGL
        if: runner.os == 'Windows'
        run: |
          git clone --depth 1 https://github.com/pyvista/gl-ci-helpers.git
          powershell gl-ci-helpers/appveyor/install_opengl.ps1

      - name: Install client dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools  
          pip install pytest-xvfb
          pip install coverage
          pip install -e ".[dev]"
          pip install matplotlib
        working-directory: src/client

      - name: Install server dependencies (for communication tests)
        run: |
          pip install numpy
          pip install wheel
          pip install -e ".[dev]"
        working-directory: src/server
          
      - name: Test with pytest
        run: |
          coverage run -m pytest
          coverage xml -i
        working-directory: src/client
        env:
          PLATFORM: ${{ matrix.platform }}
      
      - name: Coverage client tests
        uses: codecov/codecov-action@v3
        with:
          files: src/client/coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  test_server:
    name: server ${{ matrix.platform }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        platform: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.9, "3.10"]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install server dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools  
          pip install numpy
          pip install wheel
          pip install coverage
          pip install -e ".[dev]"
        working-directory: src/server
          
      - name: Test with pytest
        run: |
          coverage run -m pytest
          coverage xml -i
        working-directory: src/server
        env:
          PLATFORM: ${{ matrix.platform }}
      
      - name: Coverage server tests
        uses: codecov/codecov-action@v3
        with:
          files: src/server/coverage.xml
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  deploy:
      # this will run when you have tagged a commit, starting with "v*"
      # and requires that you have put your twine API key in your 
      # github secrets (see readme for details)
      needs: [test_client, test_server]
      runs-on: ubuntu-latest
      if: contains(github.ref, 'tags')
      steps:
        - uses: actions/checkout@v3
        - name: Set up Python
          uses: actions/setup-python@v3
          with:
            python-version: "3.x"
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install twine 
            pip install build

        - name: Build and publish dcp_client
          env:
            TWINE_USERNAME: __token__
            TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
          run: |
            git tag
            python -m build .
            twine upload dist/*
          working-directory: src/client

        - name: Build and publish dcp_server
          env:
            TWINE_USERNAME: __token__
            TWINE_PASSWORD: ${{ secrets.TWINE_API_KEY }}
          run: |
            git tag
            python -m build .
            twine upload dist/*
          working-directory: src/server
        
